// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  SERV
  DIRET
  SECRET
  ADMIN
}

enum Dash{
  COMMON
  SCHOOL
  ORGAN
  ADMIN
}

model User{
  id String @id @default(uuid())
  name String @db.VarChar(254)
  email String? @db.VarChar(254)
  login String @db.VarChar(128) @unique
  password String @db.VarChar(128)
  cpf String @db.VarChar(14) @unique
  role Role @default(SERV)
  dash Dash @default(COMMON)
  is_active Boolean @default(true)
  is_first_access Boolean @default(true)
  created_at DateTime @default(now())
  profile Image?
  token Token?
  director_school School?
  work_school SchoolServer[]
  frequencies Frequency[]

  @@map("users")
}

model Image{
  id String @id @default(uuid())
  name String @db.VarChar(200)
  size Int @db.Integer()
  url String @db.Text()
  key String @unique @db.VarChar(200)
  created_at DateTime @default(now())
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique

  @@map("images")
}

model Token{
  id String @id @default(uuid())
  token String @db.VarChar(200)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique
  created_at DateTime @default(now())

  @@map("token")
}

model School{
  id String @id @default(uuid())
  name String @db.VarChar(254) @unique
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  director User? @relation(fields: [director_id], references: [id], onDelete: Cascade)
  director_id String? @unique
  school_infreq Float @default(0)
  servers SchoolServer[]
  classes ClassSchool[]

  @@map("schools")
}

model SchoolServer{
  school School @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id String
  server User @relation(fields: [server_id], references: [id], onDelete: Cascade)
  server_id String
  dash Dash @default(COMMON)

  @@id([school_id, server_id])
  @@map("school_server")
}

model SchoolYear{
  id String @id @default(uuid())
  year String @db.VarChar(10) @unique
  classes ClassSchool[]

  @@map("school_year")
}

model Class{
  id String @id @default(uuid())
  name String @db.VarChar(254) @unique
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  schools ClassSchool[]

  @@map("classes")
}

model ClassSchool{
  class Class @relation(fields: [class_id], references: [id], onDelete: Cascade)
  class_id String
  school School @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id String
  school_year SchoolYear @relation(fields: [school_year_id], references: [id], onDelete: Cascade)
  school_year_id String
  class_infreq Float @default(0)
  students ClassStudent[]
  frequencies Frequency[]

  @@id([class_id, school_id, school_year_id])
  @@map("class_school")
}

enum StatusFrequency{
  OPENED
  CLOSED
}

model Frequency{
  id String @id @default(uuid())
  date String @db.VarChar(50)
  month Int @default(0)
  status StatusFrequency @default(OPENED)
  created_at DateTime @default(now())
  finished_at Float @default(0)
  class ClassSchool @relation(fields: [class_id, school_id, school_year_id], references: [class_id, school_id, school_year_id], onDelete: Cascade)
  class_id String
  school_id String
  school_year_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  students FrequencyStudent[]

  @@map("frequencies")
}

model Student{
  id String @id @default(uuid())
  name String @db.VarChar(254)
  registry String @db.VarChar(50) @unique
  is_active Boolean @default(true)
  justify_disabled String? @db.Text
  created_at DateTime @default(now())
  infreq Float @default(0)
  classes ClassStudent[]
  frequencies FrequencyStudent[]

  @@map("students")
}

model ClassStudent{
  class ClassSchool @relation(fields: [class_id, school_id, school_year_id], references: [class_id, school_id, school_year_id], onDelete: Cascade)
  class_id String
  school_id String
  school_year_id String
  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id String

  @@id([class_id, school_id, school_year_id, student_id])
  @@map("class_student")
}

enum StatusStudent{
  PRESENTED
  MISSED
  JUSTIFIED
}

model FrequencyStudent{
  id String @id @default(uuid())
  status StatusStudent @default(PRESENTED)
  justification String? @db.Text
  updated_at String? @db.VarChar(200)
  frequency Frequency @relation(fields: [frequency_id], references: [id], onDelete: Cascade)
  frequency_id String
  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_id String

  @@map("frequency_student")
}
